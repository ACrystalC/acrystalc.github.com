<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | The Science of Operations]]></title>
  <link href="http://ACrystalC.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ACrystalC.github.com/"/>
  <updated>2013-05-28T15:01:50-04:00</updated>
  <id>http://ACrystalC.github.com/</id>
  <author>
    <name><![CDATA[Crystal Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mailgun and your Rails App]]></title>
    <link href="http://ACrystalC.github.com/blog/2013/04/02/mailgun-and-your-rails-app/"/>
    <updated>2013-04-02T21:50:00-04:00</updated>
    <id>http://ACrystalC.github.com/blog/2013/04/02/mailgun-and-your-rails-app</id>
    <content type="html"><![CDATA[<p>There are a lot of email services that allow you to send emails and then look at statistics like open and click-through rates. It's very easy to get these stats for yourself personally. However sometimes you want to give others access to them as well. It's not like you can send around your email service password and let everyone check the dashboard whenever they're curious. Here's one way to make open and click-through rates available directly in your app.</p>

<p>Theoretically you could build all sorts of information tracking into the email itself. 1x1 pixel images that load when an email is opened so you can track email open rates. Custom urls to check click-thru rates. But since there are services that do this for you already, I'll be using <a href="http://www.mailgun.com/">Mailgun</a> here. According to Mailgun there are three ways to access the tracking data from your emails.</p>

<ol>
<li><p>Control Panel: There are summary tracking stats, tables with event details and campaign reports.</p></li>
<li><p>HTTP API: You can programmatically access event data and tracking stats.</p></li>
<li><p>Events: Mailgun can perform an HTTP request into your application when an event occurs.</p></li>
</ol>


<p>The third one is of interest since it can send the data you want directly to your app. If you're using SMTP already, you won't even need to change your configuration much except to put in your Mailgun info. For the app I was working on, we needed to keep track of click-through rates for links that users emailed to other memebers in their group. So to start I somehow had to get Mailgun to perform an HTTP POST request whenever a specific event (link was clicked) occurred. This was actually pretty easy in Mailgun. You just provide them with a callback URL and then set that URL up as a route in your app that hits a specific event.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;/email/mailgun&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;stats#create&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Look at us using webhooks!</p>

<p>Now that the callback URL was set up we needed to somehow get the user ID and article ID passed from our app to Mailgun, to the email recipient, back to Mailgun, who would then send it back to us. There was no point in having statistics if we couldn't tell who they were for. Reading through Mailgun's documentation will reveal that there are custom <a href="http://en.wikipedia.org/wiki/MIME">MIME</a> headers that can be used for this purpose. According to the documentation X-Mailgun-Variables can be used to attach custom JSON data to the message. So in the mailer you can manually set the variables in the header.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;X-Mailgun-Variables&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:article_id</span> <span class="o">=&gt;</span> <span class="vi">@article</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">}</span><span class="o">.</span><span class="n">to_json</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now when the event triggers the HTTP POST request to our app we can access the ID of the user the email was sent to as well as the ID of the article they were sent so we can save that data in our database.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">create</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;event = params[:event]</span>
</span><span class='line'><span class="sr">if event == &#39;opened&#39;</span>
</span><span class='line'><span class="sr">  stats = Stat.where(:user_id =&amp;gt; params[:user_id], :article_id =&amp;gt; params[:article_id]).first</span>
</span><span class='line'><span class="sr">  stats.opens = 1</span>
</span><span class='line'><span class="sr">elsif event == &#39;clicked&#39;</span>
</span><span class='line'><span class="sr">  stats = Stat.where(:user_id =&amp;gt; params[:user_id], :article_id =&amp;gt; params[:article_id]).first</span>
</span><span class='line'><span class="sr">  stats.clicks = 1 </span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">stats.save </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the data is saved, we're able to access it anytime and display it for users who now know exactly who has and hasn't clicked the link in the email they were sent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Let Users Invite Friends to Their Groups]]></title>
    <link href="http://ACrystalC.github.com/blog/2013/03/28/how-to-let-users-invite-friends-to-their-groups/"/>
    <updated>2013-03-28T21:38:00-04:00</updated>
    <id>http://ACrystalC.github.com/blog/2013/03/28/how-to-let-users-invite-friends-to-their-groups</id>
    <content type="html"><![CDATA[<p>Say you want to build a service where people can invite others to a specific group or team or project. Not an entirely uncommon idea. What do you use to build that invitation system? There's <a href="https://github.com/scambra/devise_invitable">devise_invitable</a>, but unless you want to spend hours breaking apart the code because it's never going to work to the exact specifications you have in mind, you might as well build your own from scratch.</p>

<p>So you have a bunch of users already and they're trying to invite people to their groups/teams/projects. There are a few possible scenarios for what will happen and some fairly common edgecases to watch out for. The most straightforward use-case is when the user sends out a group invite to a new recipient, the recipient receives it, and signs up on the site. The recipient then becomes a user and all that's needed on the backend is for their data to be added to the users table and for the association between them and the group to be created.</p>

<p>Sweet and easy. I think I'll go pat myself on the back and have some pie.</p>

<p>But wait.</p>

<p>What happens if they're a user already? Well, ok maybe we'll just check for that first that way if they are we can take note. Then we can send them an invite letting them know and they'll see the group they're invited to when they log in. Maybe something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">user_already_exists?</span><span class="p">(</span><span class="n">recipient_email</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;member =  User.find_by_email(recipient_email)</span>
</span><span class='line'><span class="sr">if member</span>
</span><span class='line'><span class="sr">  self.user_id = member.id</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  send_invite</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>No harm, no foul! Now onto pie.</p>

<p>Hmm, but what if the invitation wasn't sent to the email that their account is under?</p>

<p>Ahh, and now things are getting a bit more complicated. How will we know that the recipient of the invitation is the same as the user who eventually signs up if they use a different email? Maybe email isn't the best identifier then. We'll need something that can be passed from the invitation back to our application that way we'll have an identifier that is unlikely to change. Let's go with a randomly generated token that we'll use in the urls we send. That way if they do sign up or log in under a different email we can still tell what group the user was invited to.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">generate_token</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;self.invitation_token = Digest::SHA1::hexdigest([Time.now, rand].join) </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Good job. Pie now?</p>

<p>Nope, because there's still the possibility that a person may be invited to multiple groups before they've accepted any invitations. We want to be able to display all the groups they're invited to so how do we make sure the invitations can be grouped together? In reality, this isn't something we can guarantee, but we can try to catch as many situations as possible by checking to see if the email the invitation is being sent to is already on the invitation table.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">check_invitation_table_for_email</span><span class="p">(</span><span class="n">recipient_email</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;invitations = Invitation.where({:email =&amp;gt; recipient_email})</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hey! This email is so lets just take the token already generated and use it for the second group invitation. Now when the recipient visits the website to either log in or sign up we'll be able to find all groups they were invited to either by their email or the invitation token and we can display all those groups for them.</p>

<p>While we're at it why don't we deal with the possibility of someone being invited to the same group multiple times. Maybe her friends really want her to join their group. Well she still only needs one invitation in our table and only one token. So when we check to see if the email is in the invitation table already let's check to see if the group id is the same as well. If it is, we'll just ignore and if not then we'll add the new group invite.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">invitations</span> <span class="o">!=</span> <span class="o">[]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  invitations.each do |invitation|</span>
</span><span class='line'><span class="sr">    if invitation.group_id == self.group_id</span>
</span><span class='line'><span class="sr">      self.group_id = nil</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">      self.invitation_token = invitation.invitation_token</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  new_invitation(recipient_email)</span>
</span><span class='line'><span class="sr">end </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once we put everything together we should have a fairly solid system that deals with a some of the most common possibilities. It'll look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">user_already_exists?</span><span class="p">(</span><span class="n">recipient_email</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;member =  User.find_by_email(recipient_email)</span>
</span><span class='line'><span class="sr">if member</span>
</span><span class='line'><span class="sr">  self.user_id = member.id</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  check_invitation_table_for_email(recipient_email)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_invitation_table_for_email</span><span class="p">(</span><span class="n">recipient_email</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;invitations = Invitation.where({:email =&amp;gt; recipient_email})</span>
</span><span class='line'><span class="sr">if invitations != []</span>
</span><span class='line'><span class="sr">  invitations.each do |invitation|</span>
</span><span class='line'><span class="sr">    if invitation.group_id == self.group_id</span>
</span><span class='line'><span class="sr">      self.group_id = nil</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">      self.invitation_token = invitation.invitation_token</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  new_invitation(recipient_email)</span>
</span><span class='line'><span class="sr">end  </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">new_invitation</span><span class="p">(</span><span class="n">recipient_email</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;generate_token</span>
</span><span class='line'><span class="sr">self.email = recipient_email</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">generate_token</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;self.invitation_token = Digest::SHA1::hexdigest([Time.now, rand].join) </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;br/</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Refactoring and pie to follow.</p>
]]></content>
  </entry>
  
</feed>
